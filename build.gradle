// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.kotlinVersion = '1.3.71'
    ext.navigationVersion = '2.3.0-alpha04'
    ext.junit5Version = '1.4.2.0'

    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$navigationVersion"
        classpath "de.mannodermaus.gradle.plugins:android-junit5:$junit5Version"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven { url 'https://jitpack.io' }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

ext {
    appcompatVersion = '1.1.0'
    coreKtxVersion = '1.2.0'
    materialVersion = '1.1.0'
    constraintlayoutVersion = '1.1.3'
    swiperefreshlayoutVersion = '1.0.0'
    pagingVersion = '2.1.2'
    glideVersion = '4.11.0'
    lifecycleVersion = '2.2.0'
    gsonVersion = '2.8.6'
    retrofitVersion = '2.8.1'
    stethoVersion = '1.5.1'
    coroutinesVersion = '1.3.4'
    daggerVersion = '2.27'
    assistedInjectDaggerVersion = '0.5.2'
    roomVersion = '2.2.5'
    timberVersion = '4.7.1'
    loggingInterceptorVersion = '4.5.0'
    leakcanaryVersion = '2.2'

    junitVersion = '4.13'
    extJunitVersion = '1.1.1'
    archCoreTestingVersion = '2.1.0'
    espressoVersion = '3.2.0'
    mockitoVersion = '3.3.0'
    mockkVersion = '1.9.3'
    dexmakerMockitoInlineVersion = '2.25.1'
    testCoroutineRuleVersion = '1.0.1'
    fragmentTestingVersion = '1.2.4'
    junitJupiterVersion = '5.3.2'

    annotationProcessors = [
            roomCompiler: "androidx.room:room-compiler:$roomVersion",
            daggerCompiler: "com.google.dagger:dagger-compiler:$daggerVersion",
            assistedInjectDaggerCompiler: "com.squareup.inject:assisted-inject-processor-dagger2:$assistedInjectDaggerVersion",
            glideCompiler: "com.github.bumptech.glide:compiler:$glideVersion"
    ]

    libraries = [
            kotlin: "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion",
            appcompat: "androidx.appcompat:appcompat:$appcompatVersion",
            coreKtx: "androidx.core:core-ktx:$coreKtxVersion",
            material: "com.google.android.material:material:$materialVersion",
            constraintlayout: "androidx.constraintlayout:constraintlayout:$constraintlayoutVersion",
            swiperefreshlayout: "androidx.swiperefreshlayout:swiperefreshlayout:$swiperefreshlayoutVersion",

            navigationFragment: "androidx.navigation:navigation-fragment:$navigationVersion",
            navigationFragmentKtx: "androidx.navigation:navigation-fragment-ktx:$navigationVersion",
            navigationUi: "androidx.navigation:navigation-ui:$navigationVersion",
            navigationUiKtx: "androidx.navigation:navigation-ui-ktx:$navigationVersion",

            paging: "androidx.paging:paging-runtime-ktx:$pagingVersion",

            glide: "com.github.bumptech.glide:glide:$glideVersion",

            lifecycleExtensions: "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion",
            lifecycleLivedata: "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion",

            gson: "com.google.code.gson:gson:$gsonVersion",

            room: "androidx.room:room-runtime:$roomVersion",
            roomKtx: "androidx.room:room-ktx:$roomVersion",

            retrofit: "com.squareup.retrofit2:retrofit:$retrofitVersion",
            retrofitConverterGson: "com.squareup.retrofit2:converter-gson:$retrofitVersion",

            stetho: "com.facebook.stetho:stetho:$stethoVersion",
            stethoOkhttp: "com.facebook.stetho:stetho-okhttp3:$stethoVersion",

            coroutinesCore: "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion",
            coroutinesAndroid: "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion",

            dagger: "com.google.dagger:dagger:$daggerVersion",
            assistedInjectDagger: "com.squareup.inject:assisted-inject-annotations-dagger2:$assistedInjectDaggerVersion",

            timber: "com.jakewharton.timber:timber:$timberVersion",

            loggingInterceptor: "com.squareup.okhttp3:logging-interceptor:$loggingInterceptorVersion",

            leakcanary: "com.squareup.leakcanary:leakcanary-android:$leakcanaryVersion"
    ]

    testLibraries = [
            junit: "junit:junit:$junitVersion",
            extJunit: "androidx.test.ext:junit:$extJunitVersion",
            archCoreTesting: "androidx.arch.core:core-testing:$archCoreTestingVersion",
            fragmentTesting: "androidx.fragment:fragment-testing:$fragmentTestingVersion",

            mockkAndroid: "io.mockk:mockk-android:$mockkVersion",

            junitJupiterApi: "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion",
            junitJupiterEngine: "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion",
            junitJupiterParams: "org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion",

            mockito: "org.mockito:mockito-core:$mockitoVersion",
            dexmakerMockitoInline: "com.linkedin.dexmaker:dexmaker-mockito-inline:$dexmakerMockitoInlineVersion",

            espressoCore: "androidx.test.espresso:espresso-core:$espressoVersion",
            espressoContrib: "androidx.test.espresso:espresso-contrib:$espressoVersion",

            coroutinesTest: "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion",
            testCoroutineRule: "com.github.marcinOz:TestCoroutineRule:$testCoroutineRuleVersion"
    ]
}
